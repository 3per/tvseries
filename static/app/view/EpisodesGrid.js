/*
 * File: app/view/EpisodesGrid.js
 * Date: Sun Sep 11 2011 23:18:22 GMT+0200 (CEST)
 *
 * This file was generated by Ext Designer version 1.2.0.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('TvSeries.view.EpisodesGrid', {
	extend: 'TvSeries.view.ui.EpisodesGrid',
	alias: 'widget.EpisodesGrid',

	season: null,
	serial: null,
        
	filterTask:  null,

	initComponent: function() {
		var me = this;
		me.callParent(arguments);

		me.down("#addEpisodeButton").on("click", me.addEpisode, me);
		me.down("#addSingleEpisodeButton").on("click", me.addSingleEpisode, me);
		me.down("#openVideoUrlButton").on("click", me.openVideoUrl, me);
		
		this.getSelectionModel().on('select', this.select, this);
		this.down("textfield").on('change', this.search, this);

		this.on('reload', this.reload, this);
                
		this.filterTask = new Ext.util.DelayedTask(this.executeSearch, this);
	},
	
	load: function(serial, season, callback, callbackScope){
		this.season = season;
		this.serial = serial;
		
		this.getStore().getProxy().extraParams = {
			idSeason: this.season.data.id
		};
        
		var loadParams = {};
		if(callback !== undefined && callbackScope !== undefined)
			loadParams = {
				scope: callbackScope,
				callback: function(){
					callback.apply(callbackScope, []);
				}
			};
		this.getStore().load(loadParams);
        
		this.setTitle("3. " + this.serial.data.title + ", " + this.season.data.title);
	},
	
	reload: function(){
		this.filterTask.cancel();
		this.load(this.serial, this.season);
	},
	
	select: function(sm, record, index, opt){
		this.filterTask.cancel();
		this.fireEvent("loadShowWindow", record, this.season, this.serial);
	},
	
	addEpisode: function(){
		var SerialStore = Ext.create('TvSeries.store.Serials',{});
		var SeasonStore = Ext.create('TvSeries.store.Season',{});
		var ReplacementsStore = Ext.create('TvSeries.store.Replacements',{});
		var addwindow = Ext.create('TvSeries.view.AddWindow', {
			renderTo: Ext.getBody(),
			serialStore: SerialStore,
			seasonStore: SeasonStore,
			replacementsStore: ReplacementsStore
		});
		addwindow.show();
		addwindow.on("hide", this.reload, this);
	},

	addSingleEpisode: function(){
		if(this.serial == null || this.season == null){
			Ext.Msg.alert("Fehler", "Bitte zuerst Serie und Staffel ausw√§hlen.");
			return;
		}
		var addSingleEpisodeWindow =Ext.create('TvSeries.view.AddSingleEpisodeWindow', {
			renderTo: Ext.getBody(),
			serial: this.serial,
			season: this.season
		});
		addSingleEpisodeWindow.show();
		addSingleEpisodeWindow.on("close", this.reload, this);
	},

	openVideoUrl: function(){
		var episode = this.getSelectionModel().getSelection();
		var episodeNumber = episode.get('number');
        if(episodeNumber <= 9){
            episodeNumber = "0" + episodeNumber;
        }
		var seasonTitle = this.season.get('title');
        var seasonTitle_ = seasonTitle.replace(/ /gi,"_");
		var seasonNumber = this.season.get('number');
		var serialTitle = this.serial.get('title');
        var serialTitle_ = serialTitle.replace(/ /gi,"_");
		
		var videourl = "/tvseries/media/" + serialTitle_ + "/" + seasonTitle_ 
						+ "/"+seasonNumber + "x" + episodeNumber;
		window.open(window.location + videourl, "_blank");
	},

	search: function(){
		this.filterTask.delay(200);
	},
        
	executeSearch: function(){
		var value = this.down("textfield").getValue();
		this.getStore().getProxy().extraParams = {
			idSeason: this.season.data.id,
			title: value
		};
		this.getStore().load();            
	}         
});